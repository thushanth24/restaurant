import {
  createContext,
  useContext,
  useState,
  useEffect,
  ReactNode,
  useRef,
  useCallback,
} from 'react';
import { useAuth } from '@/context/AuthContext';
import { WebSocketMessageType } from '@shared/types';

interface WebSocketContextType {
  socket: WebSocket | null;
  isConnected: boolean;
  lastMessage: any | null;
  reconnect: () => void;
}

const WebSocketContext = createContext<WebSocketContextType | undefined>(undefined);

export function WebSocketProvider({ children }: { children: ReactNode }) {
  const [socket, setSocket] = useState<WebSocket | null>(null);
  const [isConnected, setIsConnected] = useState(false);
  const [lastMessage, setLastMessage] = useState<any | null>(null);
  const { user, isAuthenticated } = useAuth();

  const reconnectAttemptsRef = useRef(0);
  const reconnectTimeoutRef = useRef<number | null>(null);
  const currentSocketRef = useRef<WebSocket | null>(null);

  const MAX_RECONNECT_ATTEMPTS = 10;
  const INITIAL_RECONNECT_DELAY = 1000;
  const MAX_RECONNECT_DELAY = 30000;

  const getReconnectDelay = useCallback(() => {
    return Math.min(
      INITIAL_RECONNECT_DELAY * Math.pow(1.5, reconnectAttemptsRef.current),
      MAX_RECONNECT_DELAY
    ) + Math.random() * 1000;
  }, []);

  const connect = useCallback(() => {
    if (import.meta.env.VITE_ENABLE_WEBSOCKETS !== 'true') {
      console.log('WebSocket disabled by VITE_ENABLE_WEBSOCKETS');
      return null;
    }

    try {
      const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
      const wsUrl = `${protocol}//${window.location.host}/ws${
        isAuthenticated && user?.id ? `?token=${user.id}` : ''
      }`;

      console.log('Connecting to WebSocket:', wsUrl);
      const newSocket = new WebSocket(wsUrl);
      currentSocketRef.current = newSocket;

      newSocket.onopen = () => {
        console.log('WebSocket connected');
        setIsConnected(true);
        setSocket(newSocket);
        reconnectAttemptsRef.current = 0;

        if (isAuthenticated && user) {
          newSocket.send(
            JSON.stringify({
              type: 'authenticate',
              payload: { userId: user.id, role: user.role },
            })
          );
        }
      };

      newSocket.onmessage = (event) => {
        const data = JSON.parse(event.data);
        setLastMessage(data);
        console.log('Received:', data);
      };

      newSocket.onclose = (event) => {
        setIsConnected(false);
        console.warn('WebSocket closed:', event.reason);
        if (event.code !== 1000 && reconnectAttemptsRef.current < MAX_RECONNECT_ATTEMPTS) {
          const delay = getReconnectDelay();
          reconnectTimeoutRef.current = window.setTimeout(() => connect(), delay);
          reconnectAttemptsRef.current += 1;
        }
      };

      newSocket.onerror = (error) => {
        console.error('WebSocket error:', error);
      };

      return newSocket;
    } catch (error) {
      console.error('WebSocket connection failed:', error);
      return null;
    }
  }, [isAuthenticated, user, getReconnectDelay]);

  useEffect(() => {
    const newSocket = connect();
    return () => {
      if (reconnectTimeoutRef.current) {
        clearTimeout(reconnectTimeoutRef.current);
      }
      newSocket?.close(1000, 'Component unmount');
    };
  }, [connect]);

  const reconnect = useCallback(() => {
    reconnectAttemptsRef.current = 0;
    connect();
  }, [connect]);

  return (
    <WebSocketContext.Provider value={{ socket, isConnected, lastMessage, reconnect }}>
      {children}
    </WebSocketContext.Provider>
  );
}

export function useWebSocket() {
  const context = useContext(WebSocketContext);
  if (!context) {
    throw new Error('useWebSocket must be used within a WebSocketProvider');
  }
  return context;
}
